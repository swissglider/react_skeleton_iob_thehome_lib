name: Test

on:
  push:
    # tags:
    #   - 'Test*'
    #   - 'Release*'

jobs:
  # justEcho1:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - run: echo "schaumer mal"
  # justEchoTest:
  #   if: startsWith(github.ref, 'refs/tags/Test')
  #   needs: [justEcho1]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Just echo Test
  #       run: echo "Hallo Test ${{ github.ref }}"
  # justEchoRelease:
  #   if: startsWith(github.ref, 'refs/tags/Release') 
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Just echo Release
  #       run: echo "Hallo Test ${{ github.ref }}"
  file_contents:
    runs-on: ubuntu-latest
    env:
      ACCEPTED_ACTION_MODES: |
        [
          "deploy",
          "publish",
          "create_pages"
        ]
    outputs:
      NOT_THE_SAME_VERSION: ${{ env.NOT_THE_SAME_VERSION }}
      ACTION_MODE: ${{ fromJson(env.TEST_TEST).actionMode }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: readJson
        run: |
          echo 'TEST_TEST<<EOF' >> $GITHUB_ENV
          cat ./test.json >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
      - name: setActionMode
        run: echo "ACTION_MODE=${{ fromJson(env.TEST_TEST).actionMode }}" >> $GITHUB_ENV
      - name: printActionMode
        run: echo '${{env.ACTION_MODE}}'
      - name: correctActionMode
        if: contains(env.ACCEPTED_ACTION_MODES, env.ACTION_MODE)
        run: echo "Action Mode is ok"
      - name: wrongActionMode
        if: contains(env.ACCEPTED_ACTION_MODES, env.ACTION_MODE) == false
        run: echo "Action Mode is not ok"
      - name: "read package.json"
        run: |
          echo 'PACKAGE_JSON<<EOF' >> $GITHUB_ENV
          cat ./package.json >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
      - name: "read last npm package version"
        id: RLNPV
        run: |
          echo "::set-output name=npm_version::$(npm view @${{github.repository}} version)"
      - name: "is the same version"
        if: fromJson(env.PACKAGE_JSON).version == steps.RLNPV.outputs.npm_version
        run: |
          echo "::warning file=package.json::Same Version on NPM and packages.json"
          echo "NOT_THE_SAME_VERSION=false" >> $GITHUB_ENV
      - name: "not the same version"
        if: fromJson(env.PACKAGE_JSON).version != steps.RLNPV.outputs.npm_version
        run: |
          echo "::notice file=package.json::Not the same Version on NPM and packages.json"
          echo "NOT_THE_SAME_VERSION=true" >> $GITHUB_ENV
      - name: output all
        run: |
          echo "::notice file=package.json::NOT_THE_SAME_VERSION = ${{ env.NOT_THE_SAME_VERSION }}"
          echo "::notice file=package.json::NOT_THE_SAME_VERSION = ${{fromJson(env.PACKAGE_JSON).version != steps.RLNPV.outputs.npm_version}}"
          echo "::notice file=package.json::ACTION_MODE = ${{ fromJson(env.TEST_TEST).actionMode }}"

  publish:
      if: needs.file_contents.outputs.NOT_THE_SAME_VERSION == 'true'
      runs-on: ubuntu-latest
      needs: [file_contents]
      steps:
        - uses: actions/checkout@v1
        - uses: actions/setup-node@v1
          with:
            node-version: 14
        - run: npm install
        - run: npm test
        - uses: JS-DevTools/npm-publish@v1
          id: publish
          with:
            token: ${{ secrets.NPM_TOKEN }}
            access: public
            check-version: true
        - name: show versions
          # if: steps.publish.outputs.type != 'none'
          run: |
            echo "::notice file=package.json::Version changed: ${{ steps.publish.outputs.old-version }} => ${{ steps.publish.outputs.version }} -- ${{ steps.publish.outputs.type }}"